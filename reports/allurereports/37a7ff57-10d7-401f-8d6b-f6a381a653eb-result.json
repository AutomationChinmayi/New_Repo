{"name": "test_loginfail", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <pages.LoginPage.LoginPage object at 0x000001ED3F1CF250>, text = '9999999999', locatorValue = '//android.widget.EditText'\nlocatorType = 'xpath'\n\n    def SendKeys(self,text, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.waitForElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:97: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\base\\BasePage.py:55: in waitForElement\n    element = wait.until(lambda x: x.find_element(AppiumBy.XPATH, '%s' % (locatorValue)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"46908603-b52d-4557-aa5c-226ffa27aed6\")>\nmethod = <function BasePage.waitForElement.<locals>.<lambda> at 0x000001ED3F300220>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       NoSuchElementError: An element could not be located on the page using the given search parameters.\nE           at AndroidUiautomator2Driver.findElOrEls (C:\\Users\\chinm\\.appium\\node_modules\\appium-uiautomator2-driver\\node_modules\\appium-android-driver\\lib\\commands\\find.ts:86:11)\nE           at processTicksAndRejections (node:internal/process/task_queues:105:5)\nE           at AndroidUiautomator2Driver.findElOrElsWithProcessing (C:\\Users\\chinm\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\basedriver\\commands\\find.ts:60:12)\nE           at AndroidUiautomator2Driver.findElement (C:\\Users\\chinm\\AppData\\Roaming\\npm\\node_modules\\appium\\node_modules\\@appium\\base-driver\\lib\\basedriver\\commands\\find.ts:75:12)\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.LoginTest.LoginTest testMethod=test_loginfail>\n\n    @pytest.mark.run(order=2)\n    def test_loginfail(self):\n>       self.lp.enterPhoneNumber()\n\nLoginTest.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\LoginPage.py:23: in enterPhoneNumber\n    self.SendKeys(\"9999999999\",self._enterPhoneNumer,\"xpath\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.LoginPage.LoginPage object at 0x000001ED3F1CF250>, text = '9999999999', locatorValue = '//android.widget.EditText'\nlocatorType = 'xpath'\n\n    def SendKeys(self,text, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.waitForElement(locatorValue, locatorType)\n            element.send_keys(text)\n            self.log.info(\"Send a text with locator type\" + locatorType + \"with locator value\" + locatorValue)\n    \n        except:\n            self.log.info(\"Unable to send the text with locator type\" + locatorType + \"with locator value\" + locatorValue)\n            self.takeScreenShot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:104: AssertionError"}, "attachments": [{"name": "xpath", "source": "d13d9595-2754-4c52-926c-eb9acafebedd-attachment.png", "type": "image/png"}, {"name": "log", "source": "7dac0342-9584-42ce-9270-b4f929b1c5c7-attachment.txt", "type": "text/plain"}], "start": 1739957633797, "stop": 1739957659766, "uuid": "d36dd6cc-1681-4a52-8146-d3cc0106f587", "historyId": "2e9d26c442f09a305fb336d897266e93", "testCaseId": "2e9d26c442f09a305fb336d897266e93", "fullName": "LoginTest.LoginTest#test_loginfail", "labels": [{"name": "tag", "value": "run(order=2)"}, {"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'beforeMethod')"}, {"name": "suite", "value": "LoginTest"}, {"name": "subSuite", "value": "LoginTest"}, {"name": "host", "value": "Chinmayi"}, {"name": "thread", "value": "30700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "LoginTest"}]}